<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Books on rusnasonov</title>
    <link>https://rusnasonov.github.io/categories/books/index.xml</link>
    <description>Recent content in Books on rusnasonov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru,en</language>
    <atom:link href="https://rusnasonov.github.io/categories/books/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Рефакторинг</title>
      <link>https://rusnasonov.github.io/post/refactoring/</link>
      <pubDate>Thu, 21 Apr 2016 12:39:24 +0600</pubDate>
      
      <guid>https://rusnasonov.github.io/post/refactoring/</guid>
      <description>

&lt;p&gt;Цитаты:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Это напоминает мне высказывание Кента Бека, которое он часто повторяет: «Я не считаю себя
замечательным программистом. Я просто хороший программист с замечательными привычками». Рефакторинг
очень помогает мне писать надежный код.&lt;/li&gt;
&lt;li&gt;Делая что-то в первый раз, вы просто
это делаете. Делая что-то аналогичное во второй раз, вы морщитесь от необходимости повторения, но все-таки
повторяете то же самое. Делая что-то похожее в третий раз, вы начинаете рефакторинг.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Основные моменты:
* Рефакторинг помогает найти ошибки
* Рефакторинг позволяет быстрее писать программы
* Применяйте рефакторинг при добавлении новой функции
* Применяйте рефакторинг, если требуется исправить ошибку
* Применяйте рефакторинг при разборе кода&lt;/p&gt;

&lt;h4 id=&#34;правила&#34;&gt;Правила:&lt;/h4&gt;

&lt;p&gt;После трех ударов начинайте рефакторинг&lt;/p&gt;

&lt;p&gt;Из за чего бывает сложно работать с программами?
В данный момент мне приходят в голову четыре причиныЖ
1 Программыб трудные для чтенияб трудно модифицироватью
2 Программыб в логике которых есть дублированиеб трудно модифицироватью
3 Программыб которым нужны дополнительные функцииб что требует изменений в работающем кодеб
трудно модифицироватью
4 Программыб реализующие сложную логику условных операторовб трудно модифицироватью&lt;/p&gt;

&lt;p&gt;Код с душком:
* Дублирование кода
* Длинный метод
* Большой класс
* Длинный список параметров
* Расходящиеся модификации
* Стрельба дробью
* Завистливые функции
* Группы данных
* Одержимость элементарными типами
* Операторы типа switch
* Параллельные иерархии наследования
* Ленивый класс
* Временное поле
* Цепочки сообщений
* Посредник
* Неуместная близость
* Альтернативные классы с разными интерфейсами
* Классы данных&lt;/p&gt;

&lt;p&gt;Пишите тесты! без них нельзя делать рефакторинг!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Паттерны проектирования</title>
      <link>https://rusnasonov.github.io/post/design_patterns/</link>
      <pubDate>Mon, 11 Apr 2016 12:57:53 +0600</pubDate>
      
      <guid>https://rusnasonov.github.io/post/design_patterns/</guid>
      <description>&lt;p&gt;Книга является вводной в паттерны проектирования программного обеспечения. В ней достаточно интересно, и просто изложен материал. Читается просто. На мой взгляд проще, чем книга &amp;ldquo;банды четырех&amp;rdquo;. Каждый паттерн разбирается на примере. Книга предназначена для новичков.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>